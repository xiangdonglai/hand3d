#version 120

// Input vertex data, different for all executions of this shader.
attribute vec3 vertexPosition_modelspace;
attribute vec3 vertexNormal_modelspace;
attribute vec3 vertexColor;


// Output data ; will be interpolated for each fragment.
varying vec3 Position_worldspace;
varying vec3 Normal_cameraspace;
varying vec3 EyeDirection_cameraspace;
varying vec3 LightDirection_cameraspace1;
varying vec3 LightDirection_cameraspace2;
varying vec3 vColor;

// Values that stay constant for the whole mesh.
uniform mat4 MVP;
uniform mat4 V;
uniform mat4 M;
uniform mat4 iMV;
uniform vec3 LightPosition_worldspace1;
uniform vec3 LightPosition_worldspace2;

void main(){

	// Output position of the vertex, in clip space : MVP * position
	gl_Position =  MVP * vec4(vertexPosition_modelspace,1);
	
	// Position of the vertex, in worldspace : M * position
	Position_worldspace = (M * vec4(vertexPosition_modelspace,1)).xyz;
	
	// Vector that goes from the vertex to the camera, in camera space.
	vec3 vertexPosition_cameraspace = ( V * M * vec4(vertexPosition_modelspace,1)).xyz;
	EyeDirection_cameraspace = vec3(0,0,0) - vertexPosition_cameraspace;

	// Vector that goes from the vertex to the light, in camera space. M is ommited because it's identity.
	vec3 LightPosition_cameraspace = ( V * vec4(LightPosition_worldspace1,1)).xyz;
	LightDirection_cameraspace1 = LightPosition_cameraspace + EyeDirection_cameraspace;
	
	// Vector that goes from the vertex to the light, in camera space. M is ommited because it's identity.
	LightPosition_cameraspace = ( V * vec4(LightPosition_worldspace2,1)).xyz;
	LightDirection_cameraspace2 = LightPosition_cameraspace + EyeDirection_cameraspace;

	// Normal of the the vertex, in camera space
	Normal_cameraspace = ( iMV* vec4(vertexNormal_modelspace,0)).xyz;
	
	vColor = vertexColor;
}

